-- Скрипт SQL для создания таблиц в базе данных ShareIt

-- Удаляем таблицы, если они существуют, начиная с зависимых
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS bookings CASCADE;
DROP TABLE IF EXISTS items CASCADE;
DROP TABLE IF EXISTS requests CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Создаем таблицу пользователей (users)
CREATE TABLE IF NOT EXISTS users(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Уникальный идентификатор пользователя (автоинкремент)
    name VARCHAR(255) NOT NULL,                             -- Имя пользователя (обязательное поле)
    email VARCHAR(255) NOT NULL UNIQUE                       -- Email пользователя (обязательное и уникальное поле)
);

-- Создаем таблицу запросов (requests)
CREATE TABLE IF NOT EXISTS requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Уникальный идентификатор запроса (автоинкремент)
    description VARCHAR(255) NOT NULL,                        -- Описание запроса (обязательное поле)
    requester_id BIGINT NOT NULL,                            -- ID пользователя, оставившего запрос (обязательное поле)
    created TIMESTAMP WITHOUT TIME ZONE NOT NULL,             -- Дата и время создания запроса (обязательное поле)
    FOREIGN KEY (requester_id) REFERENCES users (id) ON UPDATE RESTRICT  -- Внешний ключ, ссылающийся на таблицу users
);

-- Создаем таблицу вещей (items)
CREATE TABLE IF NOT EXISTS items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Уникальный идентификатор вещи (автоинкремент)
    name VARCHAR(255) NOT NULL,                             -- Название вещи (обязательное поле)
    description VARCHAR(255) NOT NULL,                        -- Описание вещи (обязательное поле)
    is_available BOOLEAN NOT NULL DEFAULT true,             -- Доступность вещи (обязательное поле, по умолчанию true)
    owner_id BIGINT NOT NULL,                                -- ID владельца вещи (обязательное поле)
    request_id BIGINT,                                      -- ID запроса, по которому создана вещь (может быть null)
    FOREIGN KEY (owner_id) REFERENCES users (id) ON UPDATE RESTRICT,    -- Внешний ключ, ссылающийся на таблицу users
    FOREIGN KEY (request_id) REFERENCES requests (id)        -- Внешний ключ, ссылающийся на таблицу requests
);

-- Создаем таблицу бронирований (bookings)
CREATE TABLE IF NOT EXISTS bookings(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Уникальный идентификатор бронирования (автоинкремент)
    start_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,         -- Дата начала бронирования (обязательное поле)
    end_date  TIMESTAMP WITHOUT TIME ZONE NOT NULL,           -- Дата окончания бронирования (обязательное поле)
    item_id BIGINT NOT NULL,                                -- ID вещи, которую бронируют (обязательное поле)
    booker_id BIGINT NOT NULL,                               -- ID пользователя, который бронирует (обязательное поле)
    status     VARCHAR(64),                                  -- Статус бронирования
    FOREIGN KEY (item_id) REFERENCES items (id) ON UPDATE RESTRICT,    -- Внешний ключ, ссылающийся на таблицу items
    FOREIGN KEY (booker_id) REFERENCES users (id) ON UPDATE RESTRICT     -- Внешний ключ, ссылающийся на таблицу users
);

-- Создаем таблицу комментариев (comments)
CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Уникальный идентификатор комментария (автоинкремент)
    text VARCHAR(2048) NOT NULL,                           -- Текст комментария (обязательное поле)
    item_id BIGINT NOT NULL,                                -- ID вещи, к которой относится комментарий (обязательное поле)
    author_id BIGINT NOT NULL,                              -- ID автора комментария (обязательное поле)
    created TIMESTAMP WITHOUT TIME ZONE,                    -- Дата и время создания комментария
    FOREIGN KEY (item_id) REFERENCES items (id) ON UPDATE RESTRICT,    -- Внешний ключ, ссылающийся на таблицу items
    FOREIGN KEY (author_id) REFERENCES users (id) ON UPDATE RESTRICT     -- Внешний ключ, ссылающийся на таблицу users
);
